package pathparser_test

import (
	"io"
	"log"
	"testing"

	"github.com/amidgo/swaglue/internal/pathparser"
	"gotest.tools/v3/assert"
)

var userFileContent = []byte{116, 97, 103, 115, 58, 10, 32, 32, 45, 32, 117, 115, 101, 114, 115, 10, 115, 117, 109, 109, 97, 114, 121, 58, 32, 67, 104, 97, 110, 103, 101, 32, 85, 115, 101, 114, 32, 70, 73, 79, 10, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 58, 10, 32, 32, 45, 32, 110, 97, 109, 101, 58, 32, 105, 100, 10, 32, 32, 32, 32, 105, 110, 58, 32, 112, 97, 116, 104, 10, 32, 32, 32, 32, 114, 101, 113, 117, 105, 114, 101, 100, 58, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 58, 10, 32, 32, 32, 32, 32, 32, 36, 114, 101, 102, 58, 32, 34, 35, 47, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 47, 115, 99, 104, 101, 109, 97, 115, 47, 73, 68, 51, 50, 34, 10, 114, 101, 115, 112, 111, 110, 115, 101, 115, 58, 10, 32, 32, 50, 48, 52, 58, 10, 32, 32, 32, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 58, 32, 34, 34, 10, 32, 32, 32, 32, 99, 111, 110, 116, 101, 110, 116, 58, 32, 123, 125, 10, 32, 32, 52, 48, 48, 58, 10, 32, 32, 32, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 58, 32, 34, 34, 10, 32, 32, 32, 32, 99, 111, 110, 116, 101, 110, 116, 58, 10, 32, 32, 32, 32, 32, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 36, 114, 101, 102, 58, 32, 34, 35, 47, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 47, 115, 99, 104, 101, 109, 97, 115, 47, 69, 114, 114, 111, 114, 82, 101, 115, 112, 111, 110, 115, 101, 34, 10}

var groupFileContent = []byte{116, 97, 103, 115, 58, 10, 32, 32, 45, 32, 103, 114, 111, 117, 112, 115, 10, 115, 117, 109, 109, 97, 114, 121, 58, 32, 67, 114, 101, 97, 116, 101, 32, 71, 114, 111, 117, 112, 10, 114, 101, 113, 117, 101, 115, 116, 66, 111, 100, 121, 58, 10, 32, 32, 114, 101, 113, 117, 105, 114, 101, 100, 58, 32, 116, 114, 117, 101, 10, 32, 32, 99, 111, 110, 116, 101, 110, 116, 58, 10, 32, 32, 32, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 58, 10, 32, 32, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 36, 114, 101, 102, 58, 32, 34, 35, 47, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 47, 115, 99, 104, 101, 109, 97, 115, 47, 71, 114, 111, 117, 112, 68, 97, 116, 97, 34, 10, 114, 101, 115, 112, 111, 110, 115, 101, 115, 58, 10, 32, 32, 50, 48, 49, 58, 10, 32, 32, 32, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 58, 32, 34, 34, 10, 32, 32, 32, 32, 99, 111, 110, 116, 101, 110, 116, 58, 10, 32, 32, 32, 32, 32, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 36, 114, 101, 102, 58, 32, 34, 35, 47, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 47, 115, 99, 104, 101, 109, 97, 115, 47, 71, 114, 111, 117, 112, 34, 10, 32, 32, 52, 48, 48, 58, 10, 32, 32, 32, 32, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 58, 32, 34, 34, 10, 32, 32, 32, 32, 99, 111, 110, 116, 101, 110, 116, 58, 10, 32, 32, 32, 32, 32, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 99, 104, 101, 109, 97, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 36, 114, 101, 102, 58, 32, 34, 35, 47, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 47, 115, 99, 104, 101, 109, 97, 115, 47, 69, 114, 114, 111, 114, 82, 101, 115, 112, 111, 110, 115, 101, 34, 10, 120, 45, 99, 111, 100, 101, 103, 101, 110, 45, 114, 101, 113, 117, 101, 115, 116, 45, 98, 111, 100, 121, 45, 110, 97, 109, 101, 58, 32, 98, 111, 100, 121, 10}

func TestParser(t *testing.T) {
	basePackage := "./testdata/path"
	parser := pathparser.NewParser(basePackage, "#/paths/")
	err := parser.Parse()
	assert.NilError(t, err, "failed parse")
	files := parser.Files()
	assert.Equal(t, len(files), 2, "wrong len")
	log.Printf("%v", files)
	postContent, _ := io.ReadAll(files["#/paths/groups/post"])
	putContent, _ := io.ReadAll(files["#/paths/users/put"])
	assert.DeepEqual(t, postContent, groupFileContent)
	assert.DeepEqual(t, putContent, userFileContent)
}
