// Code generated by mockery v2.40.1. DO NOT EDIT.

package gluermocks

import (
	model "github.com/amidgo/swaglue/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ComponentsParser is an autogenerated mock type for the ComponentsParser type
type ComponentsParser struct {
	mock.Mock
}

type ComponentsParser_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentsParser) EXPECT() *ComponentsParser_Expecter {
	return &ComponentsParser_Expecter{mock: &_m.Mock}
}

// ComponentItems provides a mock function with given fields:
func (_m *ComponentsParser) ComponentItems() []*model.Item {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ComponentItems")
	}

	var r0 []*model.Item
	if rf, ok := ret.Get(0).(func() []*model.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Item)
		}
	}

	return r0
}

// ComponentsParser_ComponentItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComponentItems'
type ComponentsParser_ComponentItems_Call struct {
	*mock.Call
}

// ComponentItems is a helper method to define mock.On call
func (_e *ComponentsParser_Expecter) ComponentItems() *ComponentsParser_ComponentItems_Call {
	return &ComponentsParser_ComponentItems_Call{Call: _e.mock.On("ComponentItems")}
}

func (_c *ComponentsParser_ComponentItems_Call) Run(run func()) *ComponentsParser_ComponentItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ComponentsParser_ComponentItems_Call) Return(_a0 []*model.Item) *ComponentsParser_ComponentItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentsParser_ComponentItems_Call) RunAndReturn(run func() []*model.Item) *ComponentsParser_ComponentItems_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields:
func (_m *ComponentsParser) Parse() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentsParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type ComponentsParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
func (_e *ComponentsParser_Expecter) Parse() *ComponentsParser_Parse_Call {
	return &ComponentsParser_Parse_Call{Call: _e.mock.On("Parse")}
}

func (_c *ComponentsParser_Parse_Call) Run(run func()) *ComponentsParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ComponentsParser_Parse_Call) Return(_a0 error) *ComponentsParser_Parse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentsParser_Parse_Call) RunAndReturn(run func() error) *ComponentsParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewComponentsParser creates a new instance of ComponentsParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentsParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentsParser {
	mock := &ComponentsParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
