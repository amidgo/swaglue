// Code generated by MockGen. DO NOT EDIT.
// Source: paths.go

// Package gluermocks is a generated GoMock package.
package gluermocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPathsParser is a mock of PathsParser interface.
type MockPathsParser struct {
	ctrl     *gomock.Controller
	recorder *MockPathsParserMockRecorder
}

// MockPathsParserMockRecorder is the mock recorder for MockPathsParser.
type MockPathsParserMockRecorder struct {
	mock *MockPathsParser
}

// NewMockPathsParser creates a new mock instance.
func NewMockPathsParser(ctrl *gomock.Controller) *MockPathsParser {
	mock := &MockPathsParser{ctrl: ctrl}
	mock.recorder = &MockPathsParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathsParser) EXPECT() *MockPathsParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockPathsParser) Parse() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(error)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockPathsParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockPathsParser)(nil).Parse))
}

// Paths mocks base method.
func (m *MockPathsParser) Paths() map[string]io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paths")
	ret0, _ := ret[0].(map[string]io.Reader)
	return ret0
}

// Paths indicates an expected call of Paths.
func (mr *MockPathsParserMockRecorder) Paths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockPathsParser)(nil).Paths))
}

// MockPathsSetter is a mock of PathsSetter interface.
type MockPathsSetter struct {
	ctrl     *gomock.Controller
	recorder *MockPathsSetterMockRecorder
}

// MockPathsSetterMockRecorder is the mock recorder for MockPathsSetter.
type MockPathsSetterMockRecorder struct {
	mock *MockPathsSetter
}

// NewMockPathsSetter creates a new mock instance.
func NewMockPathsSetter(ctrl *gomock.Controller) *MockPathsSetter {
	mock := &MockPathsSetter{ctrl: ctrl}
	mock.recorder = &MockPathsSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathsSetter) EXPECT() *MockPathsSetterMockRecorder {
	return m.recorder
}

// SetPaths mocks base method.
func (m *MockPathsSetter) SetPaths(paths map[string]io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPaths", paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPaths indicates an expected call of SetPaths.
func (mr *MockPathsSetterMockRecorder) SetPaths(paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaths", reflect.TypeOf((*MockPathsSetter)(nil).SetPaths), paths)
}
