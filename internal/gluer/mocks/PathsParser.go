// Code generated by mockery v2.42.1. DO NOT EDIT.

package gluermocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// PathsParser is an autogenerated mock type for the PathsParser type
type PathsParser struct {
	mock.Mock
}

type PathsParser_Expecter struct {
	mock *mock.Mock
}

func (_m *PathsParser) EXPECT() *PathsParser_Expecter {
	return &PathsParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields:
func (_m *PathsParser) Parse() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PathsParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type PathsParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
func (_e *PathsParser_Expecter) Parse() *PathsParser_Parse_Call {
	return &PathsParser_Parse_Call{Call: _e.mock.On("Parse")}
}

func (_c *PathsParser_Parse_Call) Run(run func()) *PathsParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PathsParser_Parse_Call) Return(_a0 error) *PathsParser_Parse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PathsParser_Parse_Call) RunAndReturn(run func() error) *PathsParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Paths provides a mock function with given fields:
func (_m *PathsParser) Paths() map[string]io.Reader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Paths")
	}

	var r0 map[string]io.Reader
	if rf, ok := ret.Get(0).(func() map[string]io.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]io.Reader)
		}
	}

	return r0
}

// PathsParser_Paths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Paths'
type PathsParser_Paths_Call struct {
	*mock.Call
}

// Paths is a helper method to define mock.On call
func (_e *PathsParser_Expecter) Paths() *PathsParser_Paths_Call {
	return &PathsParser_Paths_Call{Call: _e.mock.On("Paths")}
}

func (_c *PathsParser_Paths_Call) Run(run func()) *PathsParser_Paths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PathsParser_Paths_Call) Return(_a0 map[string]io.Reader) *PathsParser_Paths_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PathsParser_Paths_Call) RunAndReturn(run func() map[string]io.Reader) *PathsParser_Paths_Call {
	_c.Call.Return(run)
	return _c
}

// NewPathsParser creates a new instance of PathsParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPathsParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *PathsParser {
	mock := &PathsParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
