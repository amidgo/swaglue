// Code generated by mockery v2.40.1. DO NOT EDIT.

package gluermocks

import (
	model "github.com/amidgo/swaglue/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ComponentsAppender is an autogenerated mock type for the ComponentsAppender type
type ComponentsAppender struct {
	mock.Mock
}

type ComponentsAppender_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentsAppender) EXPECT() *ComponentsAppender_Expecter {
	return &ComponentsAppender_Expecter{mock: &_m.Mock}
}

// AppendComponent provides a mock function with given fields: componentName, componentItems
func (_m *ComponentsAppender) AppendComponent(componentName string, componentItems []*model.Item) error {
	ret := _m.Called(componentName, componentItems)

	if len(ret) == 0 {
		panic("no return value specified for AppendComponent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*model.Item) error); ok {
		r0 = rf(componentName, componentItems)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComponentsAppender_AppendComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendComponent'
type ComponentsAppender_AppendComponent_Call struct {
	*mock.Call
}

// AppendComponent is a helper method to define mock.On call
//   - componentName string
//   - componentItems []*model.Item
func (_e *ComponentsAppender_Expecter) AppendComponent(componentName interface{}, componentItems interface{}) *ComponentsAppender_AppendComponent_Call {
	return &ComponentsAppender_AppendComponent_Call{Call: _e.mock.On("AppendComponent", componentName, componentItems)}
}

func (_c *ComponentsAppender_AppendComponent_Call) Run(run func(componentName string, componentItems []*model.Item)) *ComponentsAppender_AppendComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*model.Item))
	})
	return _c
}

func (_c *ComponentsAppender_AppendComponent_Call) Return(_a0 error) *ComponentsAppender_AppendComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentsAppender_AppendComponent_Call) RunAndReturn(run func(string, []*model.Item) error) *ComponentsAppender_AppendComponent_Call {
	_c.Call.Return(run)
	return _c
}

// NewComponentsAppender creates a new instance of ComponentsAppender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentsAppender(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentsAppender {
	mock := &ComponentsAppender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
