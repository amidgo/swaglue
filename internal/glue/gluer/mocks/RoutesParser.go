// Code generated by mockery v2.40.1. DO NOT EDIT.

package gluermocks

import (
	model "github.com/amidgo/swaglue/internal/glue/model"
	mock "github.com/stretchr/testify/mock"
)

// RoutesParser is an autogenerated mock type for the RoutesParser type
type RoutesParser struct {
	mock.Mock
}

type RoutesParser_Expecter struct {
	mock *mock.Mock
}

func (_m *RoutesParser) EXPECT() *RoutesParser_Expecter {
	return &RoutesParser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields:
func (_m *RoutesParser) Parse() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoutesParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type RoutesParser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
func (_e *RoutesParser_Expecter) Parse() *RoutesParser_Parse_Call {
	return &RoutesParser_Parse_Call{Call: _e.mock.On("Parse")}
}

func (_c *RoutesParser_Parse_Call) Run(run func()) *RoutesParser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RoutesParser_Parse_Call) Return(_a0 error) *RoutesParser_Parse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoutesParser_Parse_Call) RunAndReturn(run func() error) *RoutesParser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Routes provides a mock function with given fields:
func (_m *RoutesParser) Routes() []*model.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routes")
	}

	var r0 []*model.Route
	if rf, ok := ret.Get(0).(func() []*model.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Route)
		}
	}

	return r0
}

// RoutesParser_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type RoutesParser_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
func (_e *RoutesParser_Expecter) Routes() *RoutesParser_Routes_Call {
	return &RoutesParser_Routes_Call{Call: _e.mock.On("Routes")}
}

func (_c *RoutesParser_Routes_Call) Run(run func()) *RoutesParser_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RoutesParser_Routes_Call) Return(_a0 []*model.Route) *RoutesParser_Routes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoutesParser_Routes_Call) RunAndReturn(run func() []*model.Route) *RoutesParser_Routes_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoutesParser creates a new instance of RoutesParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoutesParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoutesParser {
	mock := &RoutesParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
