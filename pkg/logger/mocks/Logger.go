// Code generated by mockery v2.42.1. DO NOT EDIT.

package loggermocks

import (
	context "context"

	logger "github.com/amidgo/swaglue/pkg/logger"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, args
func (_m *Logger) Debug(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Debug(msg interface{}, args ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(msg string, args ...interface{})) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// DebugContext provides a mock function with given fields: ctx, msg, args
func (_m *Logger) DebugContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_DebugContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebugContext'
type Logger_DebugContext_Call struct {
	*mock.Call
}

// DebugContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) DebugContext(ctx interface{}, msg interface{}, args ...interface{}) *Logger_DebugContext_Call {
	return &Logger_DebugContext_Call{Call: _e.mock.On("DebugContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_DebugContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_DebugContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_DebugContext_Call) Return() *Logger_DebugContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_DebugContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_DebugContext_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, args
func (_m *Logger) Error(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Error(msg interface{}, args ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Error_Call) Run(run func(msg string, args ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorContext provides a mock function with given fields: ctx, msg, args
func (_m *Logger) ErrorContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_ErrorContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorContext'
type Logger_ErrorContext_Call struct {
	*mock.Call
}

// ErrorContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) ErrorContext(ctx interface{}, msg interface{}, args ...interface{}) *Logger_ErrorContext_Call {
	return &Logger_ErrorContext_Call{Call: _e.mock.On("ErrorContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_ErrorContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_ErrorContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_ErrorContext_Call) Return() *Logger_ErrorContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_ErrorContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_ErrorContext_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, args
func (_m *Logger) Info(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Info(msg interface{}, args ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Info_Call) Run(run func(msg string, args ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InfoContext provides a mock function with given fields: ctx, msg, args
func (_m *Logger) InfoContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_InfoContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoContext'
type Logger_InfoContext_Call struct {
	*mock.Call
}

// InfoContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) InfoContext(ctx interface{}, msg interface{}, args ...interface{}) *Logger_InfoContext_Call {
	return &Logger_InfoContext_Call{Call: _e.mock.On("InfoContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_InfoContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_InfoContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_InfoContext_Call) Return() *Logger_InfoContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_InfoContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_InfoContext_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, args
func (_m *Logger) Warn(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Warn(msg interface{}, args ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, args...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(msg string, args ...interface{})) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// WarnContext provides a mock function with given fields: ctx, msg, args
func (_m *Logger) WarnContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_WarnContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WarnContext'
type Logger_WarnContext_Call struct {
	*mock.Call
}

// WarnContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) WarnContext(ctx interface{}, msg interface{}, args ...interface{}) *Logger_WarnContext_Call {
	return &Logger_WarnContext_Call{Call: _e.mock.On("WarnContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_WarnContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_WarnContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_WarnContext_Call) Return() *Logger_WarnContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_WarnContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_WarnContext_Call {
	_c.Call.Return(run)
	return _c
}

// With provides a mock function with given fields: args
func (_m *Logger) With(args ...interface{}) logger.Logger {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) logger.Logger); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type Logger_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) With(args ...interface{}) *Logger_With_Call {
	return &Logger_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_With_Call) Run(run func(args ...interface{})) *Logger_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_With_Call) Return(_a0 logger.Logger) *Logger_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_With_Call) RunAndReturn(run func(...interface{}) logger.Logger) *Logger_With_Call {
	_c.Call.Return(run)
	return _c
}

// WithGroup provides a mock function with given fields: name
func (_m *Logger) WithGroup(name string) logger.Logger {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for WithGroup")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(string) logger.Logger); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// Logger_WithGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithGroup'
type Logger_WithGroup_Call struct {
	*mock.Call
}

// WithGroup is a helper method to define mock.On call
//   - name string
func (_e *Logger_Expecter) WithGroup(name interface{}) *Logger_WithGroup_Call {
	return &Logger_WithGroup_Call{Call: _e.mock.On("WithGroup", name)}
}

func (_c *Logger_WithGroup_Call) Run(run func(name string)) *Logger_WithGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Logger_WithGroup_Call) Return(_a0 logger.Logger) *Logger_WithGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithGroup_Call) RunAndReturn(run func(string) logger.Logger) *Logger_WithGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
