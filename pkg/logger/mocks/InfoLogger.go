// Code generated by mockery v2.42.1. DO NOT EDIT.

package loggermocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// InfoLogger is an autogenerated mock type for the InfoLogger type
type InfoLogger struct {
	mock.Mock
}

type InfoLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *InfoLogger) EXPECT() *InfoLogger_Expecter {
	return &InfoLogger_Expecter{mock: &_m.Mock}
}

// Info provides a mock function with given fields: msg, args
func (_m *InfoLogger) Info(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// InfoLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type InfoLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *InfoLogger_Expecter) Info(msg interface{}, args ...interface{}) *InfoLogger_Info_Call {
	return &InfoLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, args...)...)}
}

func (_c *InfoLogger_Info_Call) Run(run func(msg string, args ...interface{})) *InfoLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *InfoLogger_Info_Call) Return() *InfoLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *InfoLogger_Info_Call) RunAndReturn(run func(string, ...interface{})) *InfoLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InfoContext provides a mock function with given fields: ctx, msg, args
func (_m *InfoLogger) InfoContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// InfoLogger_InfoContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoContext'
type InfoLogger_InfoContext_Call struct {
	*mock.Call
}

// InfoContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *InfoLogger_Expecter) InfoContext(ctx interface{}, msg interface{}, args ...interface{}) *InfoLogger_InfoContext_Call {
	return &InfoLogger_InfoContext_Call{Call: _e.mock.On("InfoContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *InfoLogger_InfoContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *InfoLogger_InfoContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *InfoLogger_InfoContext_Call) Return() *InfoLogger_InfoContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *InfoLogger_InfoContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *InfoLogger_InfoContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewInfoLogger creates a new instance of InfoLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInfoLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *InfoLogger {
	mock := &InfoLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
