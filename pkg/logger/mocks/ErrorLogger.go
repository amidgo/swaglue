// Code generated by mockery v2.42.1. DO NOT EDIT.

package loggermocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ErrorLogger is an autogenerated mock type for the ErrorLogger type
type ErrorLogger struct {
	mock.Mock
}

type ErrorLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorLogger) EXPECT() *ErrorLogger_Expecter {
	return &ErrorLogger_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields: msg, args
func (_m *ErrorLogger) Error(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ErrorLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type ErrorLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *ErrorLogger_Expecter) Error(msg interface{}, args ...interface{}) *ErrorLogger_Error_Call {
	return &ErrorLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, args...)...)}
}

func (_c *ErrorLogger_Error_Call) Run(run func(msg string, args ...interface{})) *ErrorLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ErrorLogger_Error_Call) Return() *ErrorLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorLogger_Error_Call) RunAndReturn(run func(string, ...interface{})) *ErrorLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorContext provides a mock function with given fields: ctx, msg, args
func (_m *ErrorLogger) ErrorContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// ErrorLogger_ErrorContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorContext'
type ErrorLogger_ErrorContext_Call struct {
	*mock.Call
}

// ErrorContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *ErrorLogger_Expecter) ErrorContext(ctx interface{}, msg interface{}, args ...interface{}) *ErrorLogger_ErrorContext_Call {
	return &ErrorLogger_ErrorContext_Call{Call: _e.mock.On("ErrorContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *ErrorLogger_ErrorContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *ErrorLogger_ErrorContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ErrorLogger_ErrorContext_Call) Return() *ErrorLogger_ErrorContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorLogger_ErrorContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *ErrorLogger_ErrorContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewErrorLogger creates a new instance of ErrorLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorLogger {
	mock := &ErrorLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
